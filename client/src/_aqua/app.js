/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-226
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1.js';


// Services

 export function registerUserStatus(...args) {
    let peer;
    let serviceId;
    let service;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "fluence/fluent-pad/status"
}
    
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'notifyOnline') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         userPeerId: req.tetraplets[0],isOnline: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 service.notifyOnline(req.args[0], req.args[1], callParams); resp.result = {}

 }
    


 if (req.fnName === 'notifyUserAdded') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         currentUser: req.tetraplets[0],isOnline: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 service.notifyUserAdded(req.args[0], req.args[1], callParams); resp.result = {}

 }
    


 if (req.fnName === 'notifyUserRemoved') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         userPeerId: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.notifyUserRemoved(req.args[0], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      


 export function registerTextState(...args) {
    let peer;
    let serviceId;
    let service;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "fluence/fluent-pad/text-state"
}
    
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'notifyTextUpdate') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         changes: req.tetraplets[0],isAuthorized: req.tetraplets[1]
     },
 };
 resp.retCode = ResultCodes.success;
 service.notifyTextUpdate(req.args[0], req.args[1], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      


 export function registerAppConfig(...args) {
    let peer;
    let serviceId;
    let service;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "fluence/get-config"
}
    
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'getApp') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.getApp(callParams)

 }
    
  
          next();
      });
 }
      

// Functions

 export function addEntry(...args) {
     let peer;
     let entry;
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         entry = args[1];
config = args[2];
     } else {
         peer = Fluence.getPeer();
         entry = args[0];
config = args[1];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (seq
           (seq
            (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
            (call %init_peer_id% ("getDataSrv" "entry") [] entry)
           )
           (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
          )
          (call %init_peer_id% ("fluence/get-config" "getApp") [] app0)
         )
         (call -relay- ("op" "noop") [])
        )
        (xor
         (seq
          (call -relay- ("op" "noop") [])
          (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! "is_authenticated") [] res)
         )
         (seq
          (call -relay- ("op" "noop") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
       )
       (call -relay- ("op" "noop") [])
      )
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app1)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app1.$.user_list.peer_id! (app1.$.user_list.service_id! "get_users") [] allUsers)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (fold allUsers.$.users! user
   (par
    (seq
     (call -relay- ("op" "noop") [])
     (xor
      (mismatch user.$.peer_id! %init_peer_id%
       (xor
        (seq
         (call user.$.relay_id! ("op" "noop") [])
         (xor
          (call user.$.peer_id! ("fluence/fluent-pad/text-state" "notifyTextUpdate") [entry res.$.is_authenticated!])
          (seq
           (seq
            (seq
             (call user.$.relay_id! ("op" "noop") [])
             (call -relay- ("op" "noop") [])
            )
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
           )
           (call -relay- ("op" "noop") [])
          )
         )
        )
        (seq
         (seq
          (call user.$.relay_id! ("op" "noop") [])
          (call -relay- ("op" "noop") [])
         )
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
        )
       )
      )
      (null)
     )
    )
    (seq
     (call -relay- ("op" "noop") [])
     (next user)
    )
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'entry', () => {return entry;});
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for addEntry');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function initAfterJoin(...args) {
     let peer;
     let me;
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         me = args[1];
config = args[2];
     } else {
         peer = Fluence.getPeer();
         me = args[0];
config = args[1];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
        (call %init_peer_id% ("getDataSrv" "me") [] me)
       )
       (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
      )
      (call -relay- ("op" "noop") [])
     )
     (xor
      (seq
       (call -relay- ("op" "noop") [])
       (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
      )
      (seq
       (call -relay- ("op" "noop") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
     )
    )
    (call -relay- ("op" "noop") [])
   )
   (fold allUsers.$.users! user
    (par
     (seq
      (seq
       (seq
        (call -relay- ("op" "noop") [])
        (xor
         (call user.$.relay_id! ("peer" "is_connected") [user.$.peer_id!] isOnline)
         (seq
          (call -relay- ("op" "noop") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
         )
        )
       )
       (call -relay- ("op" "noop") [])
      )
      (par
       (seq
        (call -relay- ("op" "noop") [])
        (xor
         (match isOnline true
          (xor
           (xor
            (call user.$.peer_id! ("fluence/fluent-pad/status" "notifyUserAdded") [me true])
            (seq
             (seq
              (seq
               (call user.$.relay_id! ("op" "noop") [])
               (call -relay- ("op" "noop") [])
              )
              (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
             )
             (call -relay- ("op" "noop") [])
            )
           )
           (seq
            (seq
             (call user.$.relay_id! ("op" "noop") [])
             (call -relay- ("op" "noop") [])
            )
            (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
           )
          )
         )
         (null)
        )
       )
       (seq
        (call -relay- ("op" "noop") [])
        (call %init_peer_id% ("fluence/fluent-pad/status" "notifyUserAdded") [user isOnline])
       )
      )
     )
     (seq
      (call -relay- ("op" "noop") [])
      (next user)
     )
    )
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [allUsers.$.users!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 6])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'me', () => {return me;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for initAfterJoin');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
      


 export function updateOnlineStatuses(...args) {
     let peer;
     
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         config = args[1];
     } else {
         peer = Fluence.getPeer();
         config = args[0];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (fold allUsers.$.users! user
   (par
    (seq
     (seq
      (seq
       (seq
        (seq
         (call -relay- ("op" "noop") [])
         (call user.$.relay_id! ("op" "noop") [])
        )
        (xor
         (call user.$.peer_id! ("peer" "is_connected") [user.$.peer_id!] isOnline)
         (seq
          (seq
           (seq
            (call user.$.relay_id! ("op" "noop") [])
            (call -relay- ("op" "noop") [])
           )
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
          )
          (call -relay- ("op" "noop") [])
         )
        )
       )
       (call user.$.relay_id! ("op" "noop") [])
      )
      (call -relay- ("op" "noop") [])
     )
     (call %init_peer_id% ("fluence/fluent-pad/status" "notifyOnline") [user.$.peer_id! isOnline])
    )
    (seq
     (call -relay- ("op" "noop") [])
     (next user)
    )
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for updateOnlineStatuses');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function getUserList(...args) {
     let peer;
     
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         config = args[1];
     } else {
         peer = Fluence.getPeer();
         config = args[0];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app.$.user_list.peer_id! (app.$.user_list.service_id! "get_users") [] allUsers)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [allUsers.$.users!])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for getUserList');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
      


 export function leave(...args) {
     let peer;
     
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         config = args[1];
     } else {
         peer = Fluence.getPeer();
         config = args[0];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
          (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
         )
         (call -relay- ("op" "noop") [])
        )
        (xor
         (seq
          (call -relay- ("op" "noop") [])
          (call app.$.user_list.peer_id! (app.$.user_list.service_id! "leave") [%init_peer_id%] res)
         )
         (seq
          (call -relay- ("op" "noop") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
       )
       (call -relay- ("op" "noop") [])
      )
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app0)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app0.$.user_list.peer_id! (app0.$.user_list.service_id! "get_users") [] allUsers)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (fold allUsers.$.users! user
   (par
    (seq
     (call user.$.relay_id! ("op" "noop") [])
     (xor
      (call user.$.peer_id! ("fluence/fluent-pad/status" "notifyUserRemoved") [%init_peer_id%])
      (seq
       (seq
        (call user.$.relay_id! ("op" "noop") [])
        (call -relay- ("op" "noop") [])
       )
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
      )
     )
    )
    (seq
     (call -relay- ("op" "noop") [])
     (next user)
    )
   )
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
  
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for leave');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return Promise.race([promise, Promise.resolve()]);
}
      


 export function join(...args) {
     let peer;
     let user;
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         user = args[1];
config = args[2];
     } else {
         peer = Fluence.getPeer();
         user = args[0];
config = args[1];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
       (call %init_peer_id% ("getDataSrv" "user") [] user)
      )
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app.$.user_list.peer_id! (app.$.user_list.service_id! "join") [user] res)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'user', () => {return user;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for join');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
      


 export function auth(...args) {
     let peer;
     
     let config;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         config = args[1];
     } else {
         peer = Fluence.getPeer();
         config = args[0];
     }
    
     let request;
     const promise = new Promise((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("fluence/get-config" "getApp") [] app)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call app.$.user_list.peer_id! (app.$.user_list.service_id! "is_authenticated") [] res)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for auth');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
      
